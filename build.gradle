apply plugin: 'java'
apply plugin: 'maven-publish'
apply plugin: 'eclipse'
apply plugin: 'idea'

java {
    sourceCompatibility = JavaVersion.VERSION_1_9
}
version = '8.0.0-SNAPSHOT'
group = 'com.createsend'

def localMavenRepo = 'file://' + new File(System.getProperty('user.home'), '.m2/repository').absolutePath

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'com.sun.jersey', name: 'jersey-client', version: '1.17.1'
    implementation group: 'com.sun.jersey', name: 'jersey-json', version: '1.17.1'
    implementation group: 'com.sun.jersey', 'name': 'jersey-core', version: '1.17.1'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-annotations', version: '2.10.2'
    implementation group: 'com.fasterxml.jackson.jaxrs', name: 'jackson-jaxrs-json-provider', version: '2.10.2'
    implementation group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.10.2'
    implementation group: 'commons-codec', name: 'commons-codec', version: '1.10'
    implementation group: 'commons-io', name: 'commons-io', version: '2.7'
}

sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'src'
        }
    }
    samples {
        java {
            srcDir 'samples'
        }
    }
}

task copyToLib(type: Copy) {
    into layout.buildDirectory.dir("libs")
    from configurations.runtimeClasspath
}

task doc(type: Javadoc) {
    source = sourceSets.main.allJava
    title = "createsend-java $version"
    classpath = sourceSets.main.compileClasspath
    destinationDir = layout.buildDirectory.dir("doc/$version").get().asFile
    options.version = true
}


publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = 'createsend-java'
                description = 'A Java library which implements the complete functionality of the Campaign Monitor API.'
                url = 'http://campaignmonitor.github.io/createsend-java/'
                licenses {
                    license {
                        name = 'The MIT License'
                        url = 'https://raw.github.com/campaignmonitor/createsend-java/master/LICENSE'
                        distribution = 'repo'
                    }
                }
                withXml {
                    def pomInclude = new XmlParser().parse(new File("pom-include.xml"))
                    pomInclude.children().each { child ->
                        asNode().append(child)
                    }
                }
            }
        }
    }

    repositories {
        maven {
            name = "sonatypeSnapshots"
            url = "https://oss.sonatype.org/content/repositories/snapshots"
            credentials {
                username = getAuth('sonatype-nexus-snapshots').userName ?: ""
                password = getAuth('sonatype-nexus-snapshots').password ?: ""
            }
        }

        maven {
            name = "sonatypeStaging"
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = getAuth('sonatype-nexus-staging').userName ?: ""
                password = getAuth('sonatype-nexus-staging').password ?: ""
            }
        }
        mavenLocal()
    }
}

def getAuth(repo_id) {
    def m2_settings = new File("${System.getProperty('user.home')}/.m2/settings.xml")
    if (m2_settings.exists()) {
        def settings = new XmlSlurper().parse(m2_settings)
        def repo = settings.servers.server.find { it.id.text() == repo_id }
        if (repo != null) return [userName: repo.username.text(), password: repo.password.text()]
    }
    [:]
}

task writePom(dependsOn: generatePomFileForMavenJavaPublication) {
    doLast {
        copy {
            from layout.buildDirectory.file("generated-pom.xml")
            into projectDir
            rename { String fileName -> "pom.xml" }
        }
    }
}
